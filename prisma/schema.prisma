generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id                 String    @id @default(cuid())
  clerkId            String    @unique
  email              String    @unique
  firstName          String?
  lastName           String?
  displayName        String?
  bio                String?
  location           String?
  phone              String?
  avatarUrl          String?
  emailNotifications Boolean   @default(true)
  smsNotifications   Boolean   @default(false)
  language           String    @default("en")
  favoriteGenres     String[]
  gameCollection     String[]
  totalListings      Int       @default(0)
  totalSales         Int       @default(0)
  isVerified         Boolean   @default(false)
  trustScore         Int       @default(100)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  lastActive         DateTime  @default(now())
  listings           Listing[]
  receivedReviews    Review[]  @relation("ReceivedReviews")
  reviews            Review[]  @relation("UserReviews")
  favorites          Listing[] @relation("UserFavorites")

  @@map("user_profiles")
}

model Listing {
  id          String        @id @default(cuid())
  title       String
  description String?
  price       Decimal       @db.Decimal(10, 2)
  condition   String
  location    String?
  imageUrl    String?
  genre       String?
  playerCount String?
  ageRange    String?
  language    String?
  expansion   Boolean       @default(false)
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isActive    Boolean       @default(true)
  views       Int           @default(0)
  favorites   Int           @default(0)
  user        UserProfile   @relation(fields: [userId], references: [id], onDelete: Cascade)
  favoritedBy UserProfile[] @relation("UserFavorites")

  @@map("listings")
}

model Review {
  id             String      @id @default(cuid())
  rating         Int
  comment        String?
  reviewerId     String
  reviewedUserId String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  reviewedUser   UserProfile @relation("ReceivedReviews", fields: [reviewedUserId], references: [id], onDelete: Cascade)
  reviewer       UserProfile @relation("UserReviews", fields: [reviewerId], references: [id], onDelete: Cascade)

  @@unique([reviewerId, reviewedUserId])
  @@map("reviews")
}
